}
rmse_grid = data.frame(K = k_grid, RMSE = rmse_grid)
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression: 65 AMGs")
rmse_grid = data.frame(K = k_grid, RMSE = rmse_grid)
ind_best = which.min(rmse_grid_out$RMSE)
ind_best = which.min(rmse_grid$RMSE)
k_best = k_grid[ind_best]
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression", subtitle = k_best)
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression")
ggplot(rmse_grid)+
geom_point(aes(x=K, y= RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression")
StanSaratogaHouses <- SaratogaHouses %>%
mutate_at(c('lotSize',"age",'landValue', "livingArea"), ~(scale(.) %>% as.vector))
saratoga_split = initial_split(StanSaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
k_grid = seq(2,100)
rmse_grid = foreach(K = k_grid, .combine='c') %do% {
knn_model = knnreg(price ~ . - sewer - fuel - heating - fireplaces - pctCollege,saratoga_train, k=K)
rmse(knn_model,saratoga_test)
}
rmse_grid = foreach(K = k_grid, .combine='c') %do% {
knn_model = knnreg(price ~ . - sewer - fuel - heating - fireplaces - pctCollege,saratoga_train, k=K)
rmse(knn_model,saratoga_test)
}
rmse_grid = data.frame(K = k_grid, RMSE = rmse_grid)
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression")
ind_best = which.min(rmse_grid$RMSE)
k_best = k_grid[ind_best]
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression")
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression", subtitle = k_best)
min(rmse_grid$RMSE)
rmse_grid = data.frame(K = k_grid, RMSE = rmse_grid)
k_min(rmse_grid$RMSE)
rmse_grid = data.frame(K = k_grid, RMSE = rmse_grid)
k_min=min(rmse_grid$RMSE)
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression", subtitle = k_min)
StanSaratogaHouses <- SaratogaHouses %>%
mutate_at(c('lotSize',"age",'landValue', "livingArea"), ~(scale(.) %>% as.vector))
saratoga_split = initial_split(StanSaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
k_grid = seq(2,100)
rmse_grid = foreach(K = k_grid, .combine='c') %do% {
knn_model = knnreg(price ~ . - sewer - fuel - heating - fireplaces - pctCollege,saratoga_train, k=K)
rmse(knn_model,saratoga_test)
}
rmse_grid = foreach(K = k_grid, .combine='c') %do% {
knn_model = knnreg(price ~ . - sewer - fuel - heating - fireplaces - pctCollege,saratoga_train, k=K)
rmse(knn_model,saratoga_test)
}
rmse_grid = data.frame(K = k_grid, RMSE = rmse_grid)
min(rmse_grid$RMSE)
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression", subtitle = k_best)
Value=min(rmse_grid$RMSE)
ggplot(rmse_grid)+
geom_point(aes(x=K, y=RMSE))+
labs(y="RMSE", title="RMSE vs k for KNN regression", subtitle = Value)
for (i in seq(1:500)){
k_grid = seq(2,100)
rmse_grid = foreach(K = k_grid, .combine='c') %do% {
knn_model = knnreg(price ~ . - sewer - fuel - heating - fireplaces - pctCollege,saratoga_train, k=K)
rmse(knn_model,saratoga_test)
}
}
View(SaratogaHouses)
View(SaratogaHouses)
StanSaratogaHouses <- SaratogaHouses %>%
mutate_at(c('lotSize',"age",'landValue', "livingArea"), ~(scale(.) %>% as.vector))
saratoga_split = initial_split(StanSaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
for (i in seq(1:100)){
k_grid = seq(2,100)
rmse_grid = foreach(K = k_grid, .combine='c') %do% {
knn_model = knnreg(price ~ . - sewer - fuel - heating - fireplaces - pctCollege,saratoga_train, k=K)
rmse(knn_model,saratoga_test)
}
}
library(tidyverse)
library(arules)  # has a big ecosystem of packages built around it
library(arulesViz)
library(igraph)
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
wine <- read.csv("G:/Github/DataMiningandStatisticalLearning/Data/wine.csv")
View(wine)
View(wine)
wine1_scaled = scale(wine, center=TRUE, scale=TRUE)
X = wine
X = scale(X, center=TRUE, scale=TRUE)
wine <- wine[,-(13)]
X = wine
X = scale(X, center=TRUE, scale=TRUE)
view(X)
summary(X)
mu = attr(X,"scaled:center")
mu = attr(X,"scaled:center")
sigma = attr(X,"scaled:scale")
clust1 = kmeans(X, 2, nstart=25)
clust1$center[1,]*sigma + mu
clust1$center[2,]*sigma + mu
clust1$center[4,]*sigma + mu
which(clust1$cluster == 1)
qplot(, color, data=wine, color=factor(clust1$cluster))
ggplot(wine) +
geom_point(aes(fixed.acidity, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
wine <- winecopy
wine <- read.csv("G:/Github/DataMiningandStatisticalLearning/Data/wine.csv")
View(wine)
winecopy <- wine
wine1 <- wine[,-(13)]
X = wine1
X = scale(X, center=TRUE, scale=TRUE)
clust1 = kmeans(X, 2, nstart=25)
ggplot(wine) +
geom_point(aes(fixed.acidity, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(n, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(y=quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(x = ..prop.., y=quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(..prop.., quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(..count.., quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_histogram(aes(quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_histogram(aes(quality, fill=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_histogram(aes(quality, fill=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(fixed.acidity, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_histogram(aes(fixed.acidity, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(fixed.acidity, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(citric.acid, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(residual.sugar, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(citric.acid, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(residual.sugar, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(citric.acid, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(residual.sugar, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
protein_distance_matrix = dist(X, method='euclidean')
# Now run hierarchical clustering
hier_protein = hclust(protein_distance_matrix, method='average')
plot(hier_protein, cex=0.8)
cluster1 = cutree(hier_protein, k=5)
summary(factor(cluster1))
cluster1 = cutree(hier_protein, k=2)
summary(factor(cluster1))
hier_protein2 = hclust(protein_distance_matrix, method='single')
plot(hier_protein2, cex=0.8)
cluster2 = cutree(hier_protein2, k=5)
summary(factor(cluster2))
distance_between_cars = dist(X)
h1 = hclust(distance_between_cars, method='single')
# Cut the tree into 10 clusters
cluster1 = cutree(h1, k=10)
summary(factor(cluster1))
library(nnet)
clust2 = kmeans(X, 6, nstart=25)
ggplot(wine) +
geom_histogram(aes(quality, fill=factor(clust2$cluster))) +
facet_wrap(~ color)
wine <- winecopy
ggplot(wine) +
geom_point(aes(x=alcohol, y=total.sulfur.dioxide, color= color))
PCAwine = prcomp(wine2, scale=TRUE, rank=6)
wine2 <- wine[,-(12:13)]
PCAwine = prcomp(wine2, scale=TRUE, rank=6)
summary(PCAwine)
PCAwine = prcomp(wine2, scale=TRUE, rank=7)
summary(PCAwine)
plot(PCAwine)
loadings_summary1 = PCAwine$rotation %>%
as.data.frame() %>%
rownames_to_column('Chemical')
winetest = merge(wine, PCAwine$x[,1:6], by="row.names")
winetest = winetest[,-(1)]
View(winetest)
lm1 = multinom(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest)
summary(lm1)
lm1 = glm(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest)
summary(lm1)
lm1 = glm(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest)
forest1 = randomForest(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, mtry=1, nTree=100, data=winetest_train)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(rpart)
forest1 = randomForest(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, mtry=1, nTree=100, data=winetest_train)
N = nrow(winetest)
winetest_frac = 0.8
N_train = floor(winetest_frac*N)
N_test = N - N_train
train_ind = sample.int(N, N_train, replace=FALSE) %>% sort
winetest_train = winetest[train_ind,]
winetest_test = winetest[-train_ind,]
forest1 = randomForest(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, mtry=1, nTree=100, data=winetest_train)
forest1 = randomForest(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, mtry=1, nTree=100, data=winetest_train)
Y
install.packages("gbm")
library(gbm)
boost1 = gbm(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest_train,
interaction.depth=2, n.trees=500, shrinkage=.05)
boost1 = gbm(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest_train,
interaction.depth=2, n.trees=500, shrinkage=.05)
plot(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest_train)
forest_coast = randomForest(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC^,
forest_coast = randomForest(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6,
data = winetest_train, ntree=500)
yhat_forest_coast = predict(forest_coast, winetest_test)
mean((yhat_forest_coast - winetest_test$quality)^2) %>% sqrt
plot(forest_coast)
partial2 = pdp::partial(forest_coast, pred.var = 'PC1')
yhat_forest_coast = predict(forest_coast, winetest_test)
summary(yhat_forest_coast)
summary(forest_coast)
plot(yhat_forest_coast)
load_data <- read.csv("G:/Github/ECO395M/data/ercot/load_data.csv")
View(load_data)
wine <- read.csv("G:/Github/DataMiningandStatisticalLearning/Data/wine.csv")
View(wine)
winecopy <- wine
wine %>%
gather(1:12, key = "variables", value = "result") %>%
ggplot(aes(result, fill = colour)) +
geom_density(alpha = 0.5)+
theme_classic()+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, key = "variables", value = "result") %>%
ggplot(aes(result, fill = color)) +
geom_density(alpha = 0.5)+
theme_classic()+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, key = "variables", value = "result") %>%
ggplot(aes(result, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12) %>%
ggplot(aes(result, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, key = "variables") %>%
ggplot(aes(result, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, value = "result") %>%
ggplot(aes(result, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, value = "result") %>%
ggplot(aes(result, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, key = "variables", value = "result") %>%
ggplot(aes(result, fill = color)) +
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, key = "variables", value = "test") %>%
ggplot(aes(result, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, key = "variables", value = "test") %>%
ggplot(aes(test, fill = color)) +
geom_density(alpha = 0.5)+
theme_classic()+
facet_wrap(.~variables, scale = "free")
wine %>%
gather(1:12, key = "chemicals", value = "quantity") %>%
ggplot(aes(test, fill = color)) +
geom_density(alpha = 0.5)+
theme_classic()+
facet_wrap(.~chemicals, scale = "free")
wine %>%
gather(1:12, key = "chemicals", value = "density") %>%
ggplot(aes(density, fill = color)) +
geom_density(alpha = 0.5)+
theme_classic()+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, key = "chemicals", value = "density") %>%
ggplot(aes(density, fill = color)) +
geom_density(alpha = 0.5)+
theme_classic()+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "density") %>%
ggplot(aes(density, fill = color)) +
geom_density(alpha = 0.5)+
theme_classic()+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "density") %>%
ggplot(aes(density, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(density, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = "red")) +
geom_density(alpha = 0.5)+
facet_wrap(.~chemicals, scale = "free")
wine %>%
wine %>%
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = c("red", "white"))) +
geom_density(alpha = 0.5)+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = c("red", "white"))) +
geom_density(alpha = 0.5)+
facet_wrap(.~chemicals, scale = "free")
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = (red,white))) +
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = ("red","white"))) +
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = "red", fill="white"))) +
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = color))) +
wine %>%
pivot_longer(1:12, names_to = "chemicals", values_to = "quantity") %>%
ggplot(aes(quantity, fill = color)) +
geom_density(alpha = 0.5)+
facet_wrap(.~chemicals, scale = "free")
ggplot(wine) +
geom_point(aes(total.sulfur.dioxide, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
clust1 = kmeans(X, 2, nstart=25)
X = wine1
wine1 <- wine[,-(13)]
X = wine1
X = scale(X, center=TRUE, scale=TRUE)
clust1 = kmeans(X, 2, nstart=25)
ggplot(wine) +
geom_point(aes(total.sulfur.dioxide, quality, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(total.sulfur.dioxide, alchol, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(total.sulfur.dioxide, alcohol, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(chloride, alcohol, color=factor(clust1$cluster))) +
facet_wrap(~ color)
ggplot(wine) +
geom_point(aes(chlorides, alcohol, color=factor(clust1$cluster))) +
facet_wrap(~ color)
hierarchy <- hclust(distances) %>%
cutree(,2)
hierarchy <- hclust(distances) %>%
cutree(hclust(distances),2)
hierarchy <- hclust(distances)
hierarchy <- hclust(distances,method = "complete")
hierarchy <- hclust(distances,method = "complete", cex=0.8)
hierarchy <- hclust(wine1)
hierarchy <- hclust(wine1)
hierarchy <- hclust(distances)
windsit <- as.dist(wine1)
wine2 <- wine[,-(12:13)]
PCAwine = prcomp(wine2, scale=TRUE, rank=7)
summary(PCAwine)
loadings_summary1 = PCAwine$rotation %>%
as.data.frame() %>%
rownames_to_column('Chemical')
winetest = merge(wine, PCAwine$x[,1:6], by="row.names")
winetest = winetest[,-(1)]
winetest <- as.factor(winetest$color)
wine <- winecopy
wine2 <- wine[,-(12:13)]
PCAwine = prcomp(wine2, scale=TRUE, rank=7)
summary(PCAwine)
loadings_summary1 = PCAwine$rotation %>%
as.data.frame() %>%
rownames_to_column('Chemical')
winetest = merge(wine, PCAwine$x[,1:6], by="row.names")
winetest = winetest[,-(1)]
winetest$color <- as.factor(winetest$color)
lm2 = lm(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest)
lm2 = glm(color ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest)
lm1 = lm(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6, data=winetest)
summary(lm1)
groceries <- read.transactions("G:/GitHub/DataMiningandStatisticalLearning/Data/groceries.txt", sep = ",")
groceries <- read.transactions("G:/GitHub/DataMiningandStatisticalLearning/Data/groceries.txt", sep = ",")
groceriescopy <- groceries
groceriescopy <- groceries
#### Make sure that we correctly imported the data
inspect(groceries[1:10])
#### What are the most frequent items?
summary(groceries)
#### Visualize Freuqency of Items that appear in 5% of the baskets and the top 20 most commonly bought items
itemFrequencyPlot(groceries, support = 0.05)
itemFrequencyPlot(groceries, topN = 20)
groceryrules <- apriori(groceries, parameter = list(support = 0.006, confidence = 0.25, minlen = 2))
inspect(groceryrules)
library(tidyverse)
library(arules)  # has a big ecosystem of packages built around it
library(arulesViz)
library(igraph)
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
library(nnet)
library(randomForest)
library(rpart)
library(gbm)
inspect(groceryrules)
#### Sort by top 5 lift
inspect(sort(groceryrules, by = "lift")[1:5])
summary(groceryrules)
library(tidyverse)
library(arules)  # has a big ecosystem of packages built around it
library(arulesViz)
library(igraph)
groceryrules <- apriori(groceries, parameter = list(support = 0.006, confidence = 0.25, minlen = 2))
inspect(groceryrules)
groceries <- read.transactions("G:/GitHub/DataMiningandStatisticalLearning/Data/groceries.txt", sep = ",")
groceriescopy <- groceries
#### Visualize Freuqency of Items that appear in 5% of the baskets and the top 20 most commonly bought items
itemFrequencyPlot(groceries, support = 0.05)
itemFrequencyPlot(groceries, topN = 20)
### Plotting Sparse Matrix
image(sample(groceries, 100))
groceryrules <- apriori(groceries, parameter = list(support = 0.006, confidence = 0.25, minlen = 2))
summary(groceryrules)
inspect(groceryrules)
arules::inspect(groceryrules)
arules::inspect(groceryrules)[1:15]
arules::inspect(groceryrules[1:15])
#### Sort by top 5 lift
arules::inspect(sort(groceryrules, by = "lift")[1:5])
#### Sort by top support, meaning how frequently it appears
inspect(sort(groceryrules, by = "support")[1:5])
#### Sort by top support, meaning how frequently it appears
arules::inspect(sort(groceryrules, by = "support")[1:5])
